-- programs ------------------------------------------------

entrypoints Program, TypeExpression ;

Program.   Program ::= [TopDef] ;

FnDef.	   TopDef ::= TypeName Ident "(" [Arg] ")" Block ;

separator nonempty TopDef "" ;

Arg. 	   Arg ::= TypeName Ident;

separator  Arg "," ;

-- statements ----------------------------------------------

Block.     Block ::= "{" [Stmt] "}" ;

separator  Stmt "" ;

Empty.     Stmt ::= ";" ;

BStmt.     Stmt ::= Block ;

Decl.      Stmt ::= TypeName [Item] ";" ;

NoInit.    Item ::= Ident ;

Init.      Item ::= Ident "=" Expr ;

separator nonempty Item "," ;

Ass.       Stmt ::= Ident "=" Expr  ";" ;

Incr.      Stmt ::= Ident "++"  ";" ;

Decr.      Stmt ::= Ident "--"  ";" ;

Ret.       Stmt ::= "return" Expr ";" ;

VRet.      Stmt ::= "return" ";" ;

Cond.      Stmt ::= "if" "(" Expr ")" Stmt  ;

CondElse.  Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt  ;

While.     Stmt ::= "while" "(" Expr ")" Stmt ;

SExp.      Stmt ::= Expr  ";" ;

-- Types ---------------------------------------------------

Int.       TypeName ::= "int" ;

Str.       TypeName ::= "string" ;

Bool.      TypeName ::= "boolean" ;

Void.      TypeName ::= "void" ;

internal   Fun. TypName ::= TypeName "(" [TypeName] ")" ;

separator  TypeName "," ;

-- Expressions ---------------------------------------------

EVar.      Expr6 ::= Ident ;

ELitInt.   Expr6 ::= Integer ;

ELitTrue.  Expr6 ::= "true" ;

ELitFalse. Expr6 ::= "false" ;

EApp.      Expr6 ::= Ident "(" [Expr] ")" ;

EString.   Expr6 ::= String ;

Neg.       Expr5 ::= "-" Expr6 ;

Not.       Expr5 ::= "!" Expr6 ;

EMul.      Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;

ERel.      Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;

EOr.       Expr ::= Expr1 "||" Expr ;

coercions  Expr 6 ;

separator  Expr "," ;

-- operators -----------------------------------------------

Plus.      AddOp ::= "+" ;

Minus.     AddOp ::= "-" ;

Times.     MulOp ::= "*" ;

Div.       MulOp ::= "/" ;

Mod.       MulOp ::= "%" ;

LTH.       RelOp ::= "<" ;

LE.        RelOp ::= "<=" ;

GTH.       RelOp ::= ">" ;

GE.        RelOp ::= ">=" ;

EQU.       RelOp ::= "==" ;

NE.        RelOp ::= "!=" ;

-- comments ------------------------------------------------

comment    "#" ;

comment    "//" ;

comment    "/*" "*/" ;


-- type expressions ----

token TypeIdentAbstract (["'"] ["abcdefghijklmnopqrstuvwxyz"]) ;

TypeParamJust. TypeParam ::= "(" [TypeIdentAbstract] ")" ;
TypeParamJustOne. TypeParam ::= TypeIdentAbstract ;
TypeParamNone. TypeParam ::= "" ;
separator nonempty TypeIdentAbstract "," ;

TypeArgEl. TypeArgEl ::= TypeExpression ;
separator nonempty TypeArgEl "," ;
TypeArgJust. TypeArg ::= "(" TypeArgEl "," [TypeArgEl] ")" ;
TypeArgJustOne. TypeArg ::= TypeSimpleExpression ;

TypeSExprEmpty. TypeSimpleExpression ::= "void" ;
TypeSExprAbstract.    TypeSimpleExpression  ::= TypeIdentAbstract;
TypeSExprIdent.       TypeSimpleExpression  ::= Ident ;
TypeSExprList.        TypeSimpleExpression     ::= "[" TypeExpression "]" ;

TypeExprSimple.  TypeExpression4      ::= TypeSimpleExpression ;
TypeExprIdent.    TypeExpression3     ::= TypeArg Ident ;
TypeExprTuple.       TypeExpression1     ::= TypeExpression2 "*" [TypeExpression2] ;
separator nonempty TypeExpression2 "*" ;
TypeFun.             TypeExpression      ::= TypeExpression1 "->" TypeExpression ;

coercions            TypeExpression      5 ;

TypeConstrDef.      TypeConstraint      ::= ":" TypeExpression ;
TypeConstrEmpty.    TypeConstraint      ::= "" ;

-- error payload ----

internal ASTProgram. ASTNode ::= Program ;
internal ASTExpr. ASTNode ::= Expr ;
internal ASTStmt. ASTNode ::= Stmt ;
internal ASTBlock. ASTNode ::= Block ;
internal ASTTopDef. ASTNode ::= TopDef ;
internal ASTTypeName. ASTNode ::= TypeName ;
internal ASTItem. ASTNode ::= Item ;
internal ASTNone. ASTNode ::= "empty-ast" ;